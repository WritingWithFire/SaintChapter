buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'java'

version = '1.16.5-0.1.0'
group = 'net.writingwithfire.saintchapter' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'saintchapter'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'snapshot', version: '20210309-1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // 解除帕秋莉调用崩溃
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                saintchapter {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                saintchapter {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'saintchapter', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                saintchapter {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// 相关依赖的maven库
repositories {
    maven {
        // Patchouli,Botania,CraftTweaker使用
        name = "Blamejared"
        url = "https://maven.blamejared.com"
    }
    maven {
        // JEI使用
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // ObserverLib使用
        name 'Hellfirepvp maven'
        url 'https://maven.hellfiredev.net/'
    }
    maven {
        // JEI备用
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        // Curios使用
        name 'Theillusivec4'
        url "https://maven.theillusivec4.top/"
    }
    maven {
        // Gecko Lib使用
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.35'

    compileOnly fg.deobf('vazkii.patchouli:Patchouli:1.16.4-53.1:api')
    runtimeOnly fg.deobf('vazkii.patchouli:Patchouli:1.16.4-53.1')

    compileOnly fg.deobf("mezz.jei:jei-1.16.5:7.7.1.110:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.5:7.7.1.110")

    compileOnly 'hellfirepvp.observerlib:observerlib:1.16.5-1.5.2.v77'
    runtimeOnly 'hellfirepvp.observerlib:observerlib:1.16.5-1.5.2.v77:deobf'

//    compileOnly fg.deobf('vazkii.botania:Botania:1.16.5-416:api')
//    runtimeOnly fg.deobf('vazkii.botania:Botania:1.16.5-416')

    compileOnly 'top.theillusivec4.curios:curios-forge:1.16.5-4.0.5.1:api'
    runtimeOnly fg.deobf('top.theillusivec4.curios:curios-forge:1.16.5-4.0.5.1')

    compileOnly fg.deobf('com.blamejared.crafttweaker:CraftTweaker-1.16.5:7.1.0.294')
    runtimeOnly fg.deobf('com.blamejared.crafttweaker:CraftTweaker-1.16.5:7.1.0.294')

    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.16.5:3.0.45')
}

// 使用UTF-8编译，生成json文件时，输出的中文字符会变成utf-8代码，并不能解决此问题
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

jar {
    manifest {
        attributes([
            "Specification-Title": "saintchapter",
            "Specification-Vendor": "LiYuxuanhaha",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"LiYuxuanhaha",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
