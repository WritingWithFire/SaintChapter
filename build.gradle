buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
//        maven {
//            url "https://repo.spongepowered.org/repository/maven-public/"
//            content { includeGroup "org.spongepowered" }
//        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
//        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
//apply plugin: 'org.spongepowered.mixin'

//mixin {
//    add sourceSets.main, "saintchapter.refmap.json"
//}

def basicVersion = "${mod_version}." + (System.env.BUILD_NUMBER ?: "homebaked")
version = "${minecraft_version}-${basicVersion}"
group = 'net.writingwithfire.saintchapter'
archivesBaseName = 'saintchapter'

java.toolchain.languageVersion = JavaLanguageVersion.of("${java_version}")

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"
//    // 版本迁移之前的mapping，由于forge仓库给出的json文件并没有给出mcp mapping的最新版本，因此保留。
//    mappings channel: 'snapshot', version: '20210309-1.16.5'

//    // 版本迁移之后导致createMcptoSrg出错的根源，目前并没有找到解决方案
//    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // 解除帕秋莉调用崩溃
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                saintchapter {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                saintchapter {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'saintchapter'

            mods {
                saintchapter {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'saintchapter', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                saintchapter {
                    source sourceSets.main
                }
            }
        }
    }
}


sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        // Patchouli, Botania, CraftTweaker, AutoRegLib, BookShelf
        name = "Blamejared"
        url = "https://maven.blamejared.com"
    }
    maven {
        // JEI
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // ObserverLib
        name = 'Hellfirepvp maven'
        url 'https://maven.hellfiredev.net/'
    }
    maven {
        // JEI
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        // Curios
        name = 'Theillusivec4'
        url "https://maven.theillusivec4.top/"
    }
    maven {
        // Gecko Lib
        name = 'Cloudsmith'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
    maven {
        // CodeChickenLib
        name = 'Covers'
        url 'https://maven.covers1624.net'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
//    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${minecraft_version}-${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${minecraft_version}-${patchouli_version}")

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

//    compileOnly "hellfirepvp.observerlib:observerlib:${minecraft_version}-${observerlib_version}"
//    runtimeOnly "hellfirepvp.observerlib:observerlib:${minecraft_version}-${observerlib_version}"

//    compileOnly fg.deobf('vazkii.botania:Botania:1.16.5-416:api')
//    runtimeOnly fg.deobf('vazkii.botania:Botania:1.16.5-416')

    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${minecraft_version}-${curios_version}:api")

    implementation fg.deobf("com.blamejared.crafttweaker:CraftTweaker-forge-${minecraft_version}:${crafttweaker_version}")

    compileOnly fg.deobf("vazkii.autoreglib:AutoRegLib:${arl_version}")
    runtimeOnly fg.deobf("vazkii.autoreglib:AutoRegLib:${arl_version}")

    compileOnly fg.deobf("net.darkhax.bookshelf:Bookshelf-Forge-${minecraft_version}:${bookshelf_version}")
    runtimeOnly fg.deobf("net.darkhax.bookshelf:Bookshelf-Forge-${minecraft_version}:${bookshelf_version}")

    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${geckolib_version}")
}

// 使用UTF-8编译，datagen生成json文件时，输出的中文字符会变成utf-8代码，这些代码并不能解决此问题
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "Saint Chapter",
                "Specification-Vendor"    : "Writingwithfire",
                "Specification-Version"   : "${project.mod_version}",
                "Implementation-Title"    : "Saint Chapter",
                "Implementation-Version"  : "${project.mod_version}",
                "Implementation-Vendor"   : "Writingwithfire",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
